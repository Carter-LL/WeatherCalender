@page "/"
@using System.Text.Json
@using Calender.Models
@using System.Text.RegularExpressions;
@using System.Text
@using Calender.Services;
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Monthly Holidays</PageTitle>

<h1>Holidays and Observances</h1>
<p>Select a month to plan!</p>

@if (monthsData != null && forecastData != null)
{
    @if (monthsData.ContainsKey(selectedMonth))
    {
        <h2>@monthsData[selectedMonth].month_name</h2>
        <p>@monthsData[selectedMonth].summary</p>

        <h3>Timeline</h3>
        <ul>
            @for (int day = monthsData[selectedMonth].starting_day; day <= monthsData[selectedMonth].ending_day; day++)
            {
                string extra = "";
                string iid = currentmonthNumber + "-" + day;
                @if (monthsData[selectedMonth].holidays.ContainsKey(day))
                {
                    extra = " - " + @monthsData[selectedMonth].holidays[day];
                }

                <li onclick="showModal('@iid')">
                    @{
                        bool complete = false;
                    }
                    @foreach(ForecastItem forecastItem in forecastData.Items){
                        if(forecastItem.Date.ToString().Contains("2024-" + currentmonthNumber + "-" + day) && !complete){
                            decimal avgtemp = Average(Convert.ToInt32(forecastItem.Temperature.Min), Convert.ToInt32(forecastItem.Temperature.Max));

                            double celsius = Convert.ToDouble(avgtemp);

                            double fahrenheit = (celsius * 9 / 5) + 32;

                            string tempText = fahrenheit.ToString() + "°";

                            <time datetime="@day">@day</time>@extra<br>@tempText
                            complete = true;
                            break;
                        }
                    }
                    @if(!complete){
                        <time datetime="@day">@day</time>@extra
                    }

                </li>
            }
        </ul>
    }
}

@code {

    Dictionary<string, Month> monthsData;
    WeatherForecast forecastData;
    int currentmonthNumber = Convert.ToInt32(DateTime.Now.ToString("MM"));
    private string selectedMonth = getFullName(Convert.ToInt32(DateTime.Now.ToString("MM")));

    private Month[]? months;

    protected override async Task OnInitializedAsync()
    {
        forecastData = await WeatherService.GetWeatherData();

        Console.WriteLine(DateTime.Now.ToString("MM"));
        string name = getFullName(Convert.ToInt32(DateTime.Now.ToString("MM")));
        string jsonString = await Http.GetStringAsync("localdata/months.json");
        monthsData = JsonSerializer.Deserialize<Dictionary<string, Month>>(jsonString);

        for (int day = monthsData[selectedMonth].starting_day; day <= monthsData[selectedMonth].ending_day; day++)
        {
            string iid = currentmonthNumber + "-" + day;

            if (await GetDataAsync("event-" + iid) != null)
            {
                monthsData[selectedMonth].holidays.Add(day, await GetDataAsync("event-" + iid));
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //Save and check if geolocation already set to avoid being rate limited by api
            if(await GetDataAsync("lat") == null){
                GeoLocation geo = await GetGeoLocation(Http);
                Console.WriteLine(geo.Lat + " - " + geo.Lon);
                await SaveDataAsync("lat", geo.Lat.ToString());
                await SaveDataAsync("lon", geo.Lon.ToString());
            }
        }
    }


    // function to get the full month name
    static string getFullName(int month)
    {
        DateTime date = new DateTime(2020, month, 1);
        return date.ToString("MMMM");
    }

    public static decimal Average(int num1, int num2)
    {
        return (decimal)(num1 + num2) / 2;
    }

    // Helper function to generate the content for the file
    // Applying Open/Closed Principle (OCP) here
    // If we need to extend the file content generation logic in the future,
    // we can modify or extend this method without changing the WriteToFile method.
    private string GenerateHolidaysContent()
    {
        var monthData = monthsData[selectedMonth];
        StringBuilder content = new StringBuilder();

        content.AppendLine($"Holidays for {monthData.month_name} ({selectedMonth}):");
        content.AppendLine($"Summary: {monthData.summary}");
        content.AppendLine("Timeline:");

        for (int day = monthData.starting_day; day <= monthData.ending_day; day++)
        {
            string extra = monthData.holidays.ContainsKey(day) ? $" - {monthData.holidays[day]}" : string.Empty;
            content.AppendLine($"Day {day}{extra}");
        }

        return content.ToString();
    }

    // Function to get the GeoLocation (Latitude and Longitude)
    private static async Task<GeoLocation> GetGeoLocation(HttpClient client)
    {
        GeoLocation geo = new();
        string jsonString = await client.GetStringAsync("https://api.my-ip.io/v2/ip.json");

        // Regex to capture lat and lon values
        string pattern = @"""lat"":\s*(-?\d+\.\d+)\s*,\s*""lon"":\s*(-?\d+\.\d+)";
        Regex regex = new Regex(pattern);
        Match match = regex.Match(jsonString);

        if (match.Success)
        {
            string latString = match.Groups[1].Value;
            string lonString = match.Groups[2].Value;

            if (float.TryParse(latString, out float latFloat) && float.TryParse(lonString, out float lonFloat))
            {
                geo.Lat = (int)Math.Round(latFloat);  // Round to the nearest integer
                geo.Lon = (int)Math.Round(lonFloat);  // Round to the nearest integer
            }
        }

        return geo;
    }

    // Save data to localStorage
    public async Task SaveDataAsync(string key, string value)
    {
        if (string.IsNullOrEmpty(key) || string.IsNullOrEmpty(value))
        {
            throw new ArgumentException("Key and value must be provided.");
        }

        // Call JavaScript to store data in localStorage
        await JSRuntime.InvokeVoidAsync("saveData", key, value);
    }

    // Load data from localStorage
    public async Task<string> GetDataAsync(string key)
    {
        if (string.IsNullOrEmpty(key))
        {
            throw new ArgumentException("Key must be provided.");
        }

        // Call JavaScript to retrieve data from localStorage
        return await JSRuntime.InvokeAsync<string>("loadData", key);
    }

    // Remove data from localStorage
    public async Task RemoveDataAsync(string key)
    {
        if (string.IsNullOrEmpty(key))
        {
            throw new ArgumentException("Key must be provided.");
        }

        // Call JavaScript to remove data from localStorage
        await JSRuntime.InvokeVoidAsync("removeData", key);
    }
}
