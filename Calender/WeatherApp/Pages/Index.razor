@page "/"
@using WeatherApp.Services;
@using WeatherApp.Models.SQL;
@using WeatherApp.Models.SQL.Tables;
@using WeatherApp.Models;
@using WeatherApp.Controllers;
@using WeatherApp.Services.Database;
@using WeatherApp.Models.SQL.Tables;
@using WeatherApp.Controllers;
@using WeatherApp.Models.SQL;
@using WeatherApp.Services;
@using WeatherApp.Models;
@inject HttpClient Http
@inject IJSRuntime JSRuntime
<PageTitle>Calender</PageTitle>

<div class="container col-sm-4 col-md-7 col-lg-4 mt-5" style="width: 100%;">
    <div class="card">
        <h3 class="card-header" id="monthAndYear"></h3>
        <table class="table table-bordered table-responsive-sm" id="calendar">
            <thead>
                <tr>
                    <th>Sun</th>
                    <th>Mon</th>
                    <th>Tue</th>
                    <th>Wed</th>
                    <th>Thu</th>
                    <th>Fri</th>
                    <th>Sat</th>
                </tr>
            </thead>

            <tbody id="calendar-body">
            </tbody>
        </table>

        <div class="form-inline">

            <button class="btn btn-outline-primary col-sm-6" id="previous" onclick="previous()">Previous</button>

            <button class="btn btn-outline-primary col-sm-6" id="next" onclick="next()" style="float: right;">Next</button>
        </div>
        <br />
        <form class="form-inline">
            <label class="lead mr-2 ml-2" for="month">Jump To: </label>
            <select class="form-control col-sm-4" name="month" id="month" onchange="jump()">
                <option value=0>Jan</option>
                <option value=1>Feb</option>
                <option value=2>Mar</option>
                <option value=3>Apr</option>
                <option value=4>May</option>
                <option value=5>Jun</option>
                <option value=6>Jul</option>
                <option value=7>Aug</option>
                <option value=8>Sep</option>
                <option value=9>Oct</option>
                <option value=10>Nov</option>
                <option value=11>Dec</option>
            </select>


            <label for="year"></label><select class="form-control col-sm-4" name="year" id="year" onchange="jump()">
                <option value=1990>1990</option>
                <option value=1991>1991</option>
                <option value=1992>1992</option>
                <option value=1993>1993</option>
                <option value=1994>1994</option>
                <option value=1995>1995</option>
                <option value=1996>1996</option>
                <option value=1997>1997</option>
                <option value=1998>1998</option>
                <option value=1999>1999</option>
                <option value=2000>2000</option>
                <option value=2001>2001</option>
                <option value=2002>2002</option>
                <option value=2003>2003</option>
                <option value=2004>2004</option>
                <option value=2005>2005</option>
                <option value=2006>2006</option>
                <option value=2007>2007</option>
                <option value=2008>2008</option>
                <option value=2009>2009</option>
                <option value=2010>2010</option>
                <option value=2011>2011</option>
                <option value=2012>2012</option>
                <option value=2013>2013</option>
                <option value=2014>2014</option>
                <option value=2015>2015</option>
                <option value=2016>2016</option>
                <option value=2017>2017</option>
                <option value=2018>2018</option>
                <option value=2019>2019</option>
                <option value=2020>2020</option>
                <option value=2021>2021</option>
                <option value=2022>2022</option>
                <option value=2023>2023</option>
                <option value=2024>2024</option>
                <option value=2025>2025</option>
                <option value=2026>2026</option>
                <option value=2027>2027</option>
                <option value=2028>2028</option>
                <option value=2029>2029</option>
                <option value=2030>2030</option>
            </select>
        </form>
    </div>
</div>
<style>
    tbody, td, tfoot, th, thead, tr {
        border-color: inherit;
        border-style: solid;
        border-width: 0;
        height: 100px;
        width: 200px;
    }
</style>
<script>

</script>
@code {
    DatabaseService _databaseService = new();
    GeoService _geoService = new();

    protected override async Task OnInitializedAsync()
    {
        //Create Planned Events Table, Checking if it already exists or not
        var PlannedEventsTable = new List<ColumnModel>
        {
            new ColumnModel("id", "INT PRIMARY KEY AUTO_INCREMENT"),
            new ColumnModel("desktop", "VARCHAR(255)"),
            new ColumnModel("date", "VARCHAR(255)"),
            new ColumnModel("description", "VARCHAR(255)")
        };
        await _databaseService.CreateTable("planned_events", PlannedEventsTable);

        //Create Userdata table to store encrypted geo data, Checking if it already exists or not
        var UserDataTable = new List<ColumnModel>
        {
            new ColumnModel("desktop", "VARCHAR(255)"),
            new ColumnModel("lat_encrypted", "VARCHAR(255)"),
            new ColumnModel("lon_encrypted", "VARCHAR(255)")
        };
        await _databaseService.CreateTable("userdata", UserDataTable);

        //Create Userdata Controller
        UserDataController userdataController = new UserDataController(new UserDataContext());

        //Get IP for encrypting geo data
        string IP = await _geoService.GetIP(Http);
        //Fallback values
        if (IP == null)
        {
            IP = "0.0.0.0";
        }

        //Check if userdata is already set to avoid rate limiting api
        UserDataModel userData = await userdataController.GetUserData(Environment.MachineName);
        if (userData == null)
        {
            Console.WriteLine("Didn't find userdata in SQL, Creating");
            //Get Required Data from APIs
            GeoLocationModel geoLocation = await _geoService.GetGeoLocation(Http);
            //Fallback values
            if (geoLocation == null)
            {
                geoLocation = new();
                geoLocation.ip = "0.0.0.0";
                geoLocation.Lat = 50;
                geoLocation.Lon = 50;
            }
            Console.WriteLine($"GeoData Latitude:{geoLocation.Lat}, Longitude:{geoLocation.Lon}");

            //Push userdata
            UserDataModel userdataModel = new()
                {
                    Desktop = Environment.MachineName,
                    Lat_Encrypted = EncryptionService.EncryptCoordinate(geoLocation.Lat.ToString(), IP),
                    Lon_Encrypted = EncryptionService.EncryptCoordinate(geoLocation.Lon.ToString(), IP),
                };
            await userdataController.CreateUserData(userdataModel);
            userData = userdataModel;
        }
        else
        {
            Console.WriteLine("Found userdata in SQL. Avoiding creation.");
        }

        Console.WriteLine("Encrypted (Server):");
        Console.WriteLine($"    Userdata: Desktop:{userData.Desktop}, LatitudeEncrypted:{userData.Lat_Encrypted}, LongitudeEncrypted:{userData.Lon_Encrypted}");

        Console.WriteLine("Decrypted (Local):");
        Console.WriteLine($"    Userdata: Desktop:{userData.Desktop}, Latitude:{EncryptionService.DecryptCoordinate(userData.Lat_Encrypted, IP)}, Longitude:{EncryptionService.DecryptCoordinate(userData.Lon_Encrypted, IP)}");

        //await PageLoad();
    }

    public async Task PageLoad()
    {
        await Task.Delay(1000);  // Example of async delay

        //Handle calender when everything is rendered

        //Create PlannedEvents Controller
        PlannedEventsController plannedEventsController = new PlannedEventsController(new PlannedEventContext());
        PlannedEventModel plannedEventModel = new()
            {
                Desktop = Environment.MachineName,
                Date = "12-14-2024",
                Description = "Getting close to christmas!"
            };
        await plannedEventsController.CreatePlannedEvent(plannedEventModel);
        await AddCalenderEvent(plannedEventModel);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("asdasd");
        if (firstRender)
        {

        }
    }


    public async Task AddCalenderEvent(PlannedEventModel model)
    {
        Console.WriteLine($"+ Calender Event: Date:{model.Date}, Description:{model.Description}");
        // Call JavaScript to remove data from localStorage
        await JSRuntime.InvokeVoidAsync("addNoteToDate", model.Date, model.Description);
    }
}